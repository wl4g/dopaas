// Generated by XCloud DevOps for Codegen, refer: http://dts.devops.wl4g.com

/*
 * Copyright 2017 ~ 2025 the original author or authors. <wanglsir@gmail.com, 983708408@qq.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.wl4g.devops.doc.enterprise.impl;

import com.github.pagehelper.PageHelper;
import com.wl4g.components.core.bean.BaseBean;
import com.wl4g.components.core.bean.doc.EnterpriseApi;
import com.wl4g.components.data.page.PageModel;
import com.wl4g.devops.dao.doc.EnterpriseApiDao;
import com.wl4g.devops.doc.enterprise.EnterpriseApiService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import static com.wl4g.components.common.lang.Assert2.notNullOf;
import static java.util.Objects.isNull;

/**
 *  service implements of {@link EnterpriseApi}
 *
 * @author root
 * @version master
 * @Date 
 * @since v1.0
 */
@Service
public class EnterpriseApiServiceImpl implements EnterpriseApiService {

    @Autowired
    private EnterpriseApiDao enterpriseApiDao;

    @Override
    public PageModel<EnterpriseApi> page(PageModel<EnterpriseApi> pm, EnterpriseApi enterpriseApi) {
        pm.page(PageHelper.startPage(pm.getPageNum(), pm.getPageSize(), true));
        pm.setRecords(enterpriseApiDao.list(enterpriseApi));
        return pm;
    }

    @Override
    public int save(EnterpriseApi enterpriseApi) {
        if (isNull(enterpriseApi.getId())) {
        	enterpriseApi.preInsert();
            return enterpriseApiDao.insertSelective(enterpriseApi);
        } else {
        	enterpriseApi.preUpdate();
            return enterpriseApiDao.updateByPrimaryKeySelective(enterpriseApi);
        }
    }

    @Override
    public EnterpriseApi detail(Long id) {
        notNullOf(id, "id");
        return enterpriseApiDao.selectByPrimaryKey(id);
    }

    @Override
    public int del(Long id) {
        notNullOf(id, "id");
        EnterpriseApi enterpriseApi = new EnterpriseApi();
        enterpriseApi.setId(id);
        enterpriseApi.setDelFlag(BaseBean.DEL_FLAG_DELETE);
        return enterpriseApiDao.updateByPrimaryKeySelective(enterpriseApi);
    }

}
