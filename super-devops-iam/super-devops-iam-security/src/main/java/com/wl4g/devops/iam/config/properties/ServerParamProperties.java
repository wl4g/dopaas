/*
 * Copyright 2017 ~ 2025 the original author or authors. <wanglsir@gmail.com, 983708408@qq.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.wl4g.devops.iam.config.properties;

import java.util.ArrayList;
import java.util.List;

import static com.wl4g.devops.tool.common.lang.Assert2.notNullOf;

import com.wl4g.devops.iam.common.config.AbstractIamProperties.ParamProperties;

/**
 * IAM server parameters configuration properties
 *
 * @author Wangl.sir <983708408@qq.com>
 * @version v1.0
 * @date 2018年11月29日
 * @since
 */
public class ServerParamProperties extends ParamProperties {
	private static final long serialVersionUID = 3258460473711285504L;

	/**
	 * Account parameter name at login time of account password.
	 */
	private String principalName = "principal";

	/**
	 * Password parameter name at login time of account password.
	 */
	private String credentialName = "credential";

	// --- [Client's secret & signature. ---

	/**
	 * When the client submits the authentication request, it needs to carry the
	 * public key (hex string) generated by itself for the next step
	 * {@link #clientSecretTokenName}
	 * 
	 * @see next-step:{@link #clientSecretTokenName}
	 */
	private String clientSecretName = "clientSecret";

	/**
	 * When the client authentication is successful, the server will respond
	 * encrypted to the {@link #clientSecretTokenName} (using the
	 * {@link #clientSecretName} encryption in the previous step).
	 * 
	 * @see prev-step:{@link #clientSecretName}
	 * @see next-step:{@link #clientSignName}
	 */
	private String clientSecretTokenName = "clientSecretToken";

	/**
	 * The signature string of the client provider, which is calculated based on
	 * the {@link #clientSecretTokenName} returned by the server in the previous
	 * step.
	 * 
	 * @see prev-step:{@link #clientSecretTokenName}
	 */
	private String clientSignName = "clientSign";

	/**
	 * The nonce string of the client provider, which is calculated based on the
	 * {@link #clientSecretTokenName} returned by the server in the previous
	 * step.
	 * 
	 * @see prev-step:{@link #clientSecretTokenName}
	 */
	private String clientNonceName = "clientNoce";

	// --- Client's secret & signature.] ---

	/**
	 * Client type reference parameter name at login time of account password.
	 */
	private String clientRefName = "client_ref";

	/**
	 * Verification verifiedToken parameter name.
	 */
	private String verifiedTokenName = "verifiedToken";

	/**
	 * Dynamic verification code operation action type parameter key-name.
	 */
	private String smsActionName = "action";

	/**
	 * Risk identification control dynamic parameters.
	 * 
	 * @see {@link com.wl4g.devops.iam.authc.GenericAuthenticationToken#userProperties}
	 * @see <a href=
	 *      "https://github.com/Valve/fingerprintjs2/wiki/Stable-components">Fingerprintjs2-Stable-components</a>
	 */
	private List<String> requiredRiskControlParams = new ArrayList<String>() {
		private static final long serialVersionUID = -8690288151434386891L;
		{
			for (DefaultRiskControlKey key : DefaultRiskControlKey.values()) {
				if (key.isRequired()) {
					add(key.getParamName());
				}
			}
		}
	};

	/**
	 * Risk identification control dynamic parameters.
	 * 
	 * @see {@link com.wl4g.devops.iam.authc.GenericAuthenticationToken#userProperties}
	 * @see <a href=
	 *      "https://github.com/Valve/fingerprintjs2/wiki/Stable-components">Fingerprintjs2-Stable-components</a>
	 */
	private List<String> optionalRiskControlParams = new ArrayList<String>() {
		private static final long serialVersionUID = -8690288151434386891L;
		{
			for (DefaultRiskControlKey key : DefaultRiskControlKey.values()) {
				if (!key.isRequired()) {
					add(key.getParamName());
				}
			}
		}
	};

	public String getPrincipalName() {
		return principalName;
	}

	public void setPrincipalName(String loginUsername) {
		this.principalName = loginUsername;
	}

	public String getCredentialName() {
		return credentialName;
	}

	public void setCredentialName(String loginPassword) {
		this.credentialName = loginPassword;
	}

	/**
	 * Gets secret public key that the client requests for authentication is
	 * used to login successfully encrypted additional ticket.
	 * 
	 * @return
	 */
	public String getClientSecretName() {
		return clientSecretName;
	}

	public void setClientSecretName(String signatureName) {
		this.clientSecretName = signatureName;
	}

	public String getClientSecretTokenName() {
		return clientSecretTokenName;
	}

	public void setClientSecretTokenName(String clientSecretTokenName) {
		this.clientSecretTokenName = clientSecretTokenName;
	}

	public String getClientSignName() {
		return clientSignName;
	}

	public void setClientSignName(String clientSignName) {
		this.clientSignName = clientSignName;
	}

	public String getClientNonceName() {
		return clientNonceName;
	}

	public void setClientNonceName(String clientNoceName) {
		this.clientNonceName = clientNoceName;
	}

	public String getClientRefName() {
		return clientRefName;
	}

	public void setClientRefName(String clientRefName) {
		this.clientRefName = clientRefName;
	}

	public String getVerifiedTokenName() {
		return verifiedTokenName;
	}

	public void setVerifiedTokenName(String verifiedTokenName) {
		this.verifiedTokenName = verifiedTokenName;
	}

	public String getSmsActionName() {
		return smsActionName;
	}

	public void setSmsActionName(String smsActionName) {
		this.smsActionName = smsActionName;
	}

	public List<String> getRequiredRiskControlParams() {
		return requiredRiskControlParams;
	}

	public void setRequiredRiskControlParams(List<String> requiredRiskControlParams) {
		this.requiredRiskControlParams = requiredRiskControlParams;
	}

	public List<String> getOptionalRiskControlParams() {
		return optionalRiskControlParams;
	}

	public void setOptionalRiskControlParams(List<String> optionalRiskControlParams) {
		this.optionalRiskControlParams = optionalRiskControlParams;
	}

	/**
	 * User properties keys definitions.
	 * 
	 * @author Wangl.sir <wanglsir@gmail.com, 983708408@qq.com>
	 * @version v1.0 2020年3月19日
	 * @since
	 * @see <a href=
	 *      "https://github.com/Valve/fingerprintjs2/wiki/Stable-components">Fingerprintjs2-Stable-components</a>
	 */
	public static enum DefaultRiskControlKey {

		//
		// --- REQUIRED risk identification control parameters deinition. ---
		//

		/**
		 * UMID signature string. </br>
		 * 
		 * <pre>
		 * e.g.umid = d9ead4a278c79794654202fc91da4231
		 * </pre>
		 */
		KEY_UMID("umid", true),

		/**
		 * Native userAgent string. </br>
		 * 
		 * <pre>
		 * e.g. 
		 * userAgent=Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36)
		 * </pre>
		 */
		KEY_USERAGENT("userAgent", true),

		/**
		 * Native OS platform string. (e.g. platform=win32)
		 */
		KEY_PLATFORM("platform", true),

		/**
		 * Client screen pixel. (e.g. pixelRatio=1366x768)
		 */
		KEY_PIXEL_RATIO("pixelRatio", true),

		/**
		 * Web browser client e.g: fingerprint2.timezone.
		 */
		KEY_TIMEZONE("timezone", true),

		/**
		 * Web browser client e.g: fingerprint2.language.
		 */
		KEY_LANGUAGE("language", true),

		/**
		 * Web browser client e.g: fingerprint2.deviceMemory.
		 */
		KEY_DEVICE_MEMORY("deviceMemory", true),

		/**
		 * Web browser client e.g: fingerprint2.cpuClass.
		 */
		KEY_CPU_CLASS("cpuClass", true),

		/**
		 * Web browser client e.g: fingerprint2.touchSupport.
		 */
		KEY_TOUCHSUPPORT("touchSupport", true),

		/**
		 * Web browser client e.g: fingerprint2.availableScreenResolution.
		 */
		KEY_AVAILABLE_SCREEN_RESOLUTION("availableScreenResolution", true),

		//
		// --- OPTIONAL risk identification control parameters deinition. ---
		//

		/**
		 * Web browser headers.referer
		 */
		KEY_WEB_REFERER("referer", false),

		/**
		 * Web browser client e.g: fingerprint2.canvas.
		 */
		KEY_WEB_CANVAS("canvas", false),

		/**
		 * Web browser client e.g: fingerprint2.webgl.
		 */
		KEY_WEB_WEBGL("webgl", false),

		/**
		 * Web browser client e.g: fingerprint2.indexedDb.
		 */
		KEY_WEB_INDEXEDDB("indexedDb", false),

		/**
		 * Web browser client e.g: fingerprint2.sessionStorage.
		 */
		KEY_WEB_SESSIONSTORAGE("sessionStorage", false),

		/**
		 * Web browser client e.g: fingerprint2.localStorage.
		 */
		KEY_WEB_LOCALSTORAGE("localStorage", false),

		/**
		 * Web browser client e.g: fingerprint2.colorDepth.
		 */
		KEY_COLOR_DEPTH("colorDepth", false);

		/**
		 * User custom properties parameters name.
		 */
		final private String paramName;

		/**
		 * Is required parameter?
		 */
		final private boolean required;

		private DefaultRiskControlKey(String paramName, boolean required) {
			notNullOf(paramName, "paramName");
			this.paramName = paramName;
			this.required = required;
		}

		public String getParamName() {
			return paramName;
		}

		public boolean isRequired() {
			return required;
		}

	}

}