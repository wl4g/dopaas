# Copyright (c) 2017 ~ 2025, the original author wangl.sir individual Inc,
# All rights reserved. Contact us <Wanglsir@gmail.com, 983708408@qq.com>
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# #### Environment(SpringCloud Feign for Uat) configuration. ####
# see: https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.2.RELEASE/reference/html
spring:
  util.timeout.sec: 60 # Default by 1sec
  xcloud:
    component:
      rpc:
        feign:
          enabled: true # Default by false, If you want to run in cluster(feign rpc) mode, you should set true
          loadbalancer: # fallback default: RoundRobinLoadbalancer
            random:
              enabled: false # Default false
            #gray:
            #  enabled: false # Default false (Priority is lower than random LB, And random LB can only enable one of them)
            #  chooseExpression: ''
  cloud:
    # see: org.springframework.cloud.commons.util.InetUtilsProperties
    inetutils:
      useOnlySiteLocalInterfaces: true # Default by false
      ignoredInterfaces: ['lo']
      # In order to solve the problem that once the timeout occurs, the default IP is localhost.
      # see: org.springframework.cloud.commons.util.InetUtils#convertAddress
      timeoutSeconds: ${spring.util.timeout-sec:60} # Default by 1sec
    circuitbreaker:
      hystrix:
        enabled: true # Default by true
    loadbalancer:
      # see: BlockingLoadBalancerClientRibbonWarnLogger#logWarning
      # see: org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration.BlockingLoadbalancerClientConfig
      # see: org.springframework.cloud.client.loadbalancer.reactive.OnNoRibbonDefaultCondition.RibbonNotEnabled
      ribbon.enabled: false # Default by false
      # [NOTE] spring-cloud-loadbalancer-2.2.6.RELEASE.jar Retrying is not supported at this time.
      # see: o.s.c.client.loadbalancer.LoadBalancerRetryProperties
      # see: o.s.c.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration.BlockingLoadbalancerClientConfig.BlockingLoadBalancerRetryConfig#loadBalancedRetryFactory
      #retry:
      #  enabled: true
      #  retryOnAllOperations: false # Default by false
      #  maxRetriesOnSameServiceInstance: 0
      #  maxRetriesOnNextServiceInstance: 1
    #ipAddress: 
#    consul:
#      discovery:
#        enabled: true
#        register: true
#        prefer-ip-address: true # Solve the problem that the health check will fail in the consumer under docker
#        service-name: ${spring.application.name}
#        hostname: localhost
#        port: ${server.port} # Port of registration service
#        healthCheckPath: /actuator/health
#        healthCheckInterval: 10s

management:
  metrics:
    binders:
      hystrix:
        enabled: true # Default by true
  endpoint:
    hystrix:
      stream:
        enabled: true # Default by true

eureka:
  instance:
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 30
    prefer-ip-address: true
    # see: org.springframework.cloud.client.HostInfoEnvironmentPostProcessor#postProcessEnvironment
    # see: org.springframework.cloud.commons.util.IdUtils#getDefaultInstanceId
    #instance-id: ${spring.cloud.client.ipAddress}:${server.port}
    metadataMap:
      instanceId: ${vcap.application.instance_id:${spring.application.name}:${spring.application.instance_id:${server.port}}}
      contextPath: ${server.servlet.contextPath:}
      management:
        contextPath: ${server.servlet.contextPath:}
  # see:https://github.com/Netflix/eureka/blob/master/eureka-client/src/main/java/com/netflix/discovery/EurekaClientConfig.java
  client:
    registerWithEureka: true # Default by true
    # [FIXED] FeignException$ServiceUnavailable:[Load balancer does not contain an instance for the service xx]
    # The consumer side is required, and the server side is optional.
    fetchRegistry: true # Default by false
    registryFetchIntervalSeconds: 30 # Default by 30
    gzipContent: true # Default by true
    eurekaConnectionIdleTimeoutSeconds: 30 # Default by true
    eurekaServerConnectTimeoutSeconds: 5 # Default by 5
    eurekaServerReadTimeoutSeconds: 8 # Default by 8
    eurekaServerTotalConnections: 200 # Default by 200(total max clients)
    eurekaServerTotalConnectionsPerHost: 50 # Default by 50(max clients)
    eurekaServiceUrlPollIntervalSeconds: 300 # Default by 300
    initialInstanceInfoReplicationIntervalSeconds: 40 # Default by 40
    instanceInfoReplicationIntervalSeconds: 30 # Default by 30

# see: spring-cloud-netflix-hystrix-2.2.6.RELEASE.jar!/META-INF/spring-configuration-metadata.json
hystrix:
  shareSecurityContext: false # Default by false
  # see: com.netflix.hystrix.HystrixThreadPoolProperties
  threadpool:
    default:
      coreSize: 200
      maxQueueSize: 10
      queueSizeRejectionThreshold: 100
  metrics:
    pollingIntervalMs: 2000 # 2000ms
  command: # see: com.netflix.hystrix.HystrixCommandProperties
    default:
      execution:
        timeout:
          enabled: true # Default by true
        isolation:
          strategy: SEMAPHORE # SEMAPHORE|THREAD
          thread:
            # Official recommendation: ribbon retries * (ribbon.readTimeout + ribbon.connectTimeout)
            # see: https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.2.RELEASE/reference/html/#hystrix-timeouts-and-ribbon-clients
            timeoutInMilliseconds: 20_000 # Default by 1000ms

# see: https://cloud.spring.io/spring-cloud-static/spring-cloud-netflix/2.2.2.RELEASE/reference/html/#example-disable-eureka-use-in-ribbon
# see: https://github.com/Netflix/ribbon/wiki/Working-with-load-balancers#components-of-load-balancer
#ribbon:
#  eureka:
#    enabled: true # Default by true
##  eager-load:
##    enabled: true
#  connectTimeout: 3000
#  readTimeout: 6000
#  okToRetryOnAllOperations: true # Try again for all operations
#  maxAutoRetriesNextServer: 2 # Number of retries for different instances of the same service
#  maxAutoRetries: 1 # Same instance retries

feign:
  hystrix: # see: org.springframework.cloud.openfeign.FeignAutoConfiguration.HystrixFeignTargeterConfiguration
    enabled: true # Default by false
  httpclient: # see: org.springframework.cloud.openfeign.FeignAutoConfiguration.HttpClientFeignConfiguration
    enabled: false # Default by true
  # see: org.springframework.cloud.openfeign.FeignAutoConfiguration.OkHttpFeignConfiguration
  # see: org.springframework.cloud.openfeign.loadbalancer.OkHttpFeignLoadBalancerConfiguration
  okhttp:
    enabled: true # Default by false
